#!/usr/bin/python
# Usage: Simplifies CLI-based deployment of CloudFormation templates with large numbers of parameters.
#   Use --prompt to prompt for parameters input. Without using --deploy, this script will simply generate the JSON output without deploying.
#############################################################################################################
# Copyright 2015 Amazon.com, Inc. or its affiliates. All Rights Reserved. 									#
# Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in		#
# compliance with the License. A copy of the License is located at  http://aws.amazon.com/apache2.0/		#																		#
# or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT    #
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific         #
# language governing permissions and limitations under the License.                                         #
#############################################################################################################

import json
import yaml
import sys
import os
import boto
from optparse import OptionParser
from boto.regioninfo import RegionInfo
from boto import configservice

try:
	AWSKEY = os.environ['AWS_ACCESS_KEY']
	AWSSECRET = os.environ['AWS_SECRET_KEY']
	USINGROLE = False
except:
	AWSKEY = ""
	AWSSECRET = ""
	USINGROLE = True

def main():

	parameters = {}
	params = None

	parser = OptionParser(usage="Usage: cfdeploy --deploy <stackname> --template <templatefile> [--prompt] [--json-parameters <json file>]",version="0.3")
        parser.add_option("-t","--template",action="store",default="main.json", dest="template",help="CloudFormation template file")
	parser.add_option("-p","--prompt",action="store_true",default=False,dest="prompt", help="prompt for input parameters")
	parser.add_option("-d","--deploy",action="store", dest="stackname",help="deploy stack using CloudFormation API")
	parser.add_option("-j","--json-parameters",action="store",default="parameters_template.json",dest='parametersfile')
	parser.add_option("-y","--yaml-parameters", action="store",default="parameters.yaml",dest="yamlparametersfile")
	parser.add_option("-g","--generate-yaml", action="store", default="parameters_new.yaml", dest="genyaml", help="generate new yaml config based on template parameters")
	parser.add_option("-a","--access-key", action="store", default = AWSKEY,  dest="accesskey")
	parser.add_option("-s","--secret-key", action="store", default = AWSSECRET, dest="secretkey")
	parser.add_option("-r","--region", action="store", default = "us-east-1", dest="region", help="region to deploy (default: us-east-1)")
	parser.add_option("-c","--create-configservice",action="store_true",default=False,dest="configservice", help="setup and config the Config Service")

	(options, args) = parser.parse_args()

        if len(sys.argv) <= 1:
                parser.print_help()
		sys.exit(0)

	if is_opt_provided(parser, 'genyaml'):
		generateYAML(options.template, options.genyaml)
		sys.exit(0)

	if is_opt_provided(parser, 'yamlparametersfile'):
		with open(options.yamlparametersfile) as file:
        	        params = yaml.load(file)
	        file.close()

	if is_opt_provided(parser, 'prompt') or is_opt_provided(parser, 'stackname'):
		os.system('clear')
		if is_opt_provided(parser, 'prompt'):
			print "Enter parameters..."
			print "   Use ENTER to accept default parameter, Use * to indicate a blank parameter.\n"

	if params is not None:
		for param in sorted(params):
			if is_opt_provided(parser, 'prompt'):
				msg = str(param) + " (Default: " + str(params[param]) + "):  "
				newparam = raw_input(msg)
				if newparam == "":
					parameters[param] = params[param]
				elif newparam == "*":
					parameters[param] = ""
				else:
					parameters[param] = newparam
			else:
				parameters[param] = params[param]
	else:
		print "ERROR: Could not load parameters"
		sys.exit(1)

	try:
		 generateParametersJSON(parameters, options.parametersfile)
	except ValueError:
		 print ValueError + "ERROR: could not generate JSON file"
		 sys.exit(1)

	if is_opt_provided(parser, 'configservice'):
		createConfigService(options.parametersfile, options.accesskey, options.secretkey, options.region)

	if is_opt_provided(parser, 'template'):
		if is_opt_provided(parser, 'prompt'):
			msg = "Do you want to deploy " + options.stackname + " now? (Y/N) "
			confirm = raw_input(msg)
			if confirm == "y" or confirm == "Y":
				createStack(options.stackname, options.template, options.parametersfile, options.accesskey, options.secretkey, options.region)
			else:
				sys.exit(0)
		else:
			createStack(options.stackname, options.template, options.parametersfile, options.accesskey, options.secretkey, options.region)

def is_opt_provided (parser, dest):
	if any (opt.dest == dest and (opt._long_opts[0] in sys.argv[1:] or opt._short_opts[0] in sys.argv[1:]) for opt in parser._get_all_options()):
		return True
   	return False

def generateYAML(jsontemplate, yamlfile):
       	# Generate a blank YAML file with parameter keys based on JSON template provided
        with open(jsontemplate) as file:
            data = json.load(file)
        file.close()

        with open(yamlfile, 'w') as f:
            f.write("# Modify the INPUT fields to set parameter values\n")
        f.close()

        for d in sorted(data['Parameters']):
            linetowrite = d + ": <INPUT>\n"
            with open(yamlfile, 'a') as f:
                f.write(linetowrite)

def generateParametersJSON(parameters, outfile):
	# Generate a CloudFormation-compatible parameters file
	jsonfile = open(outfile, 'w')
	jsonfile.write("[\n")
	count = 0

	for param in parameters:
		if "<INPUT>" in str(parameters[param]):
			paramstring = ""
		else:
			paramstring = str(parameters[param])

		new_json = {"ParameterKey": str(param),"ParameterValue": paramstring,"UsePreviousValue": "false" }
		dump_json = json.dumps(new_json)
		parsed_json = json.loads(dump_json)

		if count != 0:
			jsonfile.write(",")
			jsonfile.write("\n")

		json.dump(parsed_json, jsonfile)
		count = count + 1

	jsonfile.write("\n ]\n")
	jsonfile.close()


def createConfigService(parametersfile,accesskey,secretkey, awsregion):

	awsconfig = configservice.connect_to_region(awsregion)
	recorders = awsconfig.describe_configuration_recorders()
	channels = awsconfig.describe_delivery_channels()

	with open(parametersfile) as p:
		pdata = json.load(p)

	parampairs = {}
	for item in pdata:
		parampairs[item['ParameterKey']] = item['ParameterValue']

	# Check for an existing recorder, if found error out with reporting
	if len(recorders) > 0:
		print "ERROR: Found an existing Config Configuration Recorder: \"" + recorders['ConfigurationRecorders'][0]['name'] + '"'
		print "ERROR: Failed to put configuration recorder 'ConfigurationRecorder' because the maximum number of configuration recorders: 1 is reached."
		print "ERROR: Creating the Config Service is meant for accounts that have not yet been configured."
		sys.exit(1)
	else:
		config_recorder = {'name':'ConfigurationRecorder', 'roleARN':parampairs['ConfigServiceRole']}
		newrecorder = awsconfig.put_configuration_recorder(config_recorder)
		print "Setting up a new configuration recorder: \"ConfigurationRecorder\""

	# Check for an existing channel, if found skip
	if len(channels) > 0 and len(channels['DeliveryChannels']) > 0:
		print "ERROR: Found at least one existing Config Delivery Channel: " + channels['DeliveryChannels']['name']
		sys.exit(1)
	else:
		deliverychannel = {'name':'DeliveryChannel','s3BucketName':parampairs['ConfigServiceS3Bucket']}
		newconfig = awsconfig.put_delivery_channel(deliverychannel)
		print "Setting up a new delivery channel: " + parampairs['ConfigServiceS3Bucket']

	# Make sure to start the recorder if possible
	try:
		awsconfig.start_configuration_recorder('ConfigurationRecorder')
	except boto.configservice.exceptions.NoSuchConfigurationRecorderException:
		print "ERROR: Could not start Configuration Recorder \"ConfigurationRecorder\""


def createStack(stackname,template,parametersfile,accesskey,secretkey, awsregion):
	# Create stack using CloudFormation API
	awsendpoint = "cloudformation." + awsregion + ".amazonaws.com"

        try:
		if USINGROLE:
			cfn = boto.connect_cloudformation(region=RegionInfo(name=awsregion,endpoint=awsendpoint))
		else:
                	cfn = boto.connect_cloudformation(accesskey, secretkey,region=RegionInfo(name=awsregion,endpoint=awsendpoint))

                with open(template) as t:
                        templatedata = t.read()

                with open(parametersfile) as p:
                        pdata = json.load(p)

                parampairs = []
                for item in pdata:
                        parampairs.append((item['ParameterKey'],item['ParameterValue']))

		try:
			cfn.validate_template(templatedata)
		except:
			print "Failed to validate template!"
			sys.exit(1)

		caplist = [ 'CAPABILITY_IAM' ]
                stackid = cfn.create_stack(stack_name = stackname, template_body = templatedata, parameters = parampairs, capabilities = caplist)
		print "Launched Stack ID:  " + stackid

        except Exception, e:
                print e
                sys.exit()


if __name__ == "__main__":
	main()
